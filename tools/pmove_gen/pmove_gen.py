"""
    pmove_gen.py

    Script to generate a table of lower-instruction bits to opcode and registers.

    We generate the test data by assembling a file of only pmove-using instructions.
    Since they produce the same "top" bits (in the pmove descriptions), we can
    find them in the generated .p56 file, and match them to the original source.

    From this we can geneerate a table by splitting the source code opcode/operands
    and translating to hopper56 enums.

"""

def parse_code_line(str):
    comment = str.find(';')
    if comment != -1:
        str = str[:comment]

    parts = str.split("\t")
    opcode = parts[0]

    operands = parts[1]
    neg = 0
    if operands.startswith('-'):
        neg = 1
        operands = operands[1:]
    ops = operands.split(',')
    while len(ops) < 3:
        ops.append("NONE")

    return opcode, str, neg, ops

def run(asm_path, p56_path, output_path):
    asm_fh = open(asm_path, "r")
    asm_lines = asm_fh.readlines()
    asm_fh.close()

    p56_fh = open(p56_path, "rb")
    p56_data = p56_fh.read()
    p56_fh.close()

    class reader:
        def __init__(self, data):
            self.data = data
            self.pos = 0

        def eof(self):
            return self.pos == len(self.data)

        def read_word(self):
            acc = self.data[self.pos]
            acc <<= 8
            acc |= self.data[self.pos + 1]
            acc <<= 8
            acc |= self.data[self.pos + 2]
            self.pos += 3
            return acc

    r = reader(p56_data[9:])
    lpos = 0

    table = {}
    empty_ops = ['NONE', 'NONE', 'NONE']
    # Special cases!
    table[0] = ('MOVE', '', 0, empty_ops)

    while not r.eof():
        v = 0
        # Find opcode
        while (v & 0xffff00) != 0x200000:
            v = r.read_word()

        # Find asm line
        str = '.org'
        while str.find("org") != -1 or str == '':
            str = asm_lines[lpos]
            lpos += 1
            str = str.strip(" \t\n")
        #print("%06x %s" % (v, str))

        idx = v & 0xff

        assert not idx in table
        entry = parse_code_line(str)
        table[idx] = entry

    if True:
        out_lines = []
        for i in range(0, 256):
            if i in table:
                opcode, str, neg, ops = table[i]
            else:
                opcode, str, neg, ops = 'invalid', '', 0, empty_ops

            opcode = opcode.upper() + ','
            ops = ','.join(ops)
            out_lines.append("\tPM_ENTRY({1:<8s} {2}, {3:<15s} ) /* {0:2x} {0:08b} */".format(i, opcode, neg, ops))

        out_fh = open(output_path, "w")
        out_fh.write("/* Table generated by pmove_gen.py */\n")

        out_fh.write("const pmove_entry g_pmove_entries[256] = {\n")
        out_fh.write(",\n".join(out_lines))
        out_fh.write("\n};\n")
        out_fh.close()

import sys
run(*sys.argv[1:])